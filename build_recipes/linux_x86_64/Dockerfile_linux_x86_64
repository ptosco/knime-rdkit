# To build an image with this Dockerfile:
# docker build -t rdkit-knime-linux-x86_64 -f Dockerfile_linux_x86_64 --network=host $@ .

# To run bash in the built image mounting a local dir inside the container:
# mkdir -p ../knime_dlls && docker run -u root --network=host --mount type=bind,source="$(pwd)/.."/knime_dlls,target=/knime_dlls -it rdkit-knime-linux:latest bash

FROM centos:7 AS GCC_TOOL_CHAIN

USER root

# Set NIBR proxy
ARG http_proxy=http://nibr-proxy.global.nibr.novartis.net:2011/
ARG https_proxy=http://nibr-proxy.global.nibr.novartis.net:2011/
ENV http_proxy=${http_proxy}
ENV https_proxy=${https_proxy}

# Add Novartis SSL certs otherwise HTTPS will not work
COPY certs /etc/pki/ca-trust/source/anchors/
RUN update-ca-trust extract

ARG BUILD_CONCURRENCY="6"
ARG RDKIT_RELEASE="2022_09_1"
ARG ZLIB_VERSION="1.2.13"
ARG BZIP2_VERSION="1.0.8"
ARG BOOST_VERSION="1_80_0"
ARG CMAKE_VERSION="3.24.2"
ARG EIGEN_VERSION="3.4.0"
ARG FREETYPE_VERSION="2.12.1"
ARG SWIG_VERSION="3.0.12"
ARG SWIG_CHKSUM="82133dfa7bba75ff9ad98a7046be687c"
ARG LIBPNG_VERSION="1.6.38"
ARG LIBPNG_CHKSUM="151d579116e601e393e780b7f46b2ff0"
ARG PIXMAN_VERSION="0.42.0"
ARG CAIRO_VERSION="1.16.0"
ARG DEVTOOLSET_PATH="/opt/rh/devtoolset-11"
ARG DEPS="/deps"
ARG WORK="/work"
ARG SRC="/src"
ARG IMAGE="/image"

RUN yum update -y
RUN yum install -y centos-release-scl
RUN yum install -y devtoolset-11 bzip2 ca-certificates openssl openssl-devel java-1.8.0-openjdk-devel

RUN rpmkeys --import http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
RUN curl https://download.mono-project.com/repo/centos7-stable.repo | tee /etc/yum.repos.d/mono-centos7-stable.repo
RUN yum install -y mono-devel

RUN groupadd -g 500 docker && \
    useradd -u 500 -s /bin/bash -g docker docker && \
    mkdir ${SRC} ${WORK} ${IMAGE} ${DEPS} && \
    chown -R docker:docker ${SRC} ${WORK} ${IMAGE} ${DEPS}
RUN mkdir -p /home/docker && chown docker:docker /home/docker
USER docker
RUN mkdir -p ${WORK}/boost ${WORK}/cmake ${WORK}/eigen ${WORK}/zlib ${WORK}/bzip2 ${WORK}/freetype ${WORK}/swig ${WORK}/cairo

WORKDIR ${WORK}/zlib
RUN curl -L -O https://zlib.net/zlib-${ZLIB_VERSION}.tar.gz
RUN tar xzf zlib-${ZLIB_VERSION}.tar.gz
WORKDIR ${WORK}/zlib/zlib-${ZLIB_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && CC="gcc -fPIC" ./configure --static --64 --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/bzip2
RUN curl -L -O https://sourceware.org/pub/bzip2/bzip2-${BZIP2_VERSION}.tar.gz
RUN tar xzf bzip2-${BZIP2_VERSION}.tar.gz
WORKDIR ${WORK}/bzip2/bzip2-${BZIP2_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && make CC="gcc -fPIC" PREFIX=${DEPS} -j${BUILD_CONCURRENCY}
RUN source ${DEVTOOLSET_PATH}/enable && make CC="gcc -fPIC" PREFIX=${DEPS} -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/boost
RUN curl -L -O https://boostorg.jfrog.io/artifactory/main/release/`echo ${BOOST_VERSION} | sed "s|_|.|g"`/source/boost_${BOOST_VERSION}.tar.bz2
RUN tar xjf boost_${BOOST_VERSION}.tar.bz2
WORKDIR ${WORK}/boost/boost_${BOOST_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && ./bootstrap.sh --with-libraries=serialization,iostreams,regex,system --without-icu --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && \
    ./b2 cflags=-fPIC cxxflags=-fPIC --prefix=${WORK}/boost/install variant=release link=static \
        --with-serialization --with-iostreams --with-regex --with-system \
        -sBZIP2_INCLUDE=${DEPS}/include -sBZIP2_LIBPATH=${DEPS}/lib \
        -sZLIB_INCLUDE=${DEPS}/include -sZLIB_LIBPATH=${DEPS}/lib && \
        cp -R stage/lib ${DEPS} && cp -R boost ${DEPS}/include

WORKDIR ${WORK}/cmake
RUN curl -L -O https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz
RUN tar xzf cmake-${CMAKE_VERSION}.tar.gz
WORKDIR ${WORK}/cmake/cmake-${CMAKE_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && ./bootstrap --prefix=${DEPS} --parallel=${BUILD_CONCURRENCY}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/eigen
RUN curl -L -o eigen-${EIGEN_VERSION}.tar.bz2 https://gitlab.com/libeigen/eigen/-/archive/${EIGEN_VERSION}/eigen-${EIGEN_VERSION}.tar.bz2
RUN tar xjf eigen-${EIGEN_VERSION}.tar.bz2
WORKDIR ${WORK}/eigen/eigen-${EIGEN_VERSION}
RUN mkdir build
WORKDIR ${WORK}/eigen/eigen-${EIGEN_VERSION}/build
RUN source ${DEVTOOLSET_PATH}/enable && ${DEPS}/bin/cmake -DCMAKE_INSTALL_PREFIX=${DEPS} ..
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} install

RUN mkdir -p ${WORK}/swig
WORKDIR ${WORK}/swig
RUN rm -f swig-${SWIG_VERSION}.tar.gz
# Occasionally files downloaded from SourceForge are corrupted, so we try up to 5 times
RUN for i in `seq 1 5`; do \
        curl -L -o swig-${SWIG_VERSION}.tar.gz https://sourceforge.net/projects/swig/files/swig/swig-${SWIG_VERSION}/swig-${SWIG_VERSION}.tar.gz/download && \
        [ `md5sum swig-${SWIG_VERSION}.tar.gz | awk '{print $1}'` = ${SWIG_CHKSUM} ] && touch swig_md5_ok && break; \
    done
RUN test -e swig_md5_ok || ( >&2 echo "Failed to download SWIG" && exit 1 )
RUN tar xzf swig-${SWIG_VERSION}.tar.gz
WORKDIR ${WORK}/swig/swig-${SWIG_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && ./configure --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

RUN mkdir -p ${WORK}/freetype
WORKDIR ${WORK}/freetype
RUN curl -L -O https://download.savannah.gnu.org/releases/freetype/freetype-${FREETYPE_VERSION}.tar.gz
RUN tar xzf freetype-${FREETYPE_VERSION}.tar.gz
WORKDIR ${WORK}/freetype/freetype-${FREETYPE_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && CC="gcc -fPIC" CXX="g++ -fPIC" \
    PKG_CONFIG_PATH=${DEPS}/lib/pkgconfig \
    ./configure --enable-static=yes --enable-shared=no --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/cairo
RUN for i in `seq 1 5`; do \
        curl -L -O https://download.sourceforge.net/libpng/libpng-${LIBPNG_VERSION}.tar.gz && \
        [ `md5sum libpng-${LIBPNG_VERSION}.tar.gz | awk '{print $1}'` = ${LIBPNG_CHKSUM} ] && touch libpng_md5_ok && break; \
    done
RUN test -e libpng_md5_ok || ( >&2 echo "Failed to download libpng" && exit 1 )
RUN tar xzf libpng-${LIBPNG_VERSION}.tar.gz
WORKDIR ${WORK}/cairo/libpng-${LIBPNG_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && CC="gcc -fPIC" \
    PKG_CONFIG_PATH=${DEPS}/lib/pkgconfig \
    ./configure --enable-shared=no --enable-static=yes --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/cairo
RUN curl -L -O https://www.cairographics.org/releases/pixman-${PIXMAN_VERSION}.tar.gz
RUN tar xzf pixman-${PIXMAN_VERSION}.tar.gz
WORKDIR ${WORK}/cairo/pixman-${PIXMAN_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && CC="gcc -fPIC" \
    PKG_CONFIG_PATH=${DEPS}/lib/pkgconfig \
    ./configure --enable-shared=no --enable-static=yes --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${WORK}/cairo
RUN curl -L -O https://www.cairographics.org/releases/cairo-${CAIRO_VERSION}.tar.xz
RUN tar xJf cairo-${CAIRO_VERSION}.tar.xz
WORKDIR ${WORK}/cairo/cairo-${CAIRO_VERSION}
RUN source ${DEVTOOLSET_PATH}/enable && CC="gcc -fPIC" CXX="g++ -fPIC" \
    PKG_CONFIG_PATH=${DEPS}/lib/pkgconfig \
    ./configure --enable-shared=no --enable-static=yes --prefix=${DEPS}
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install

WORKDIR ${SRC}
RUN curl -L -O https://github.com/rdkit/rdkit/archive/refs/tags/Release_${RDKIT_RELEASE}.tar.gz
RUN tar xzf Release_${RDKIT_RELEASE}.tar.gz
WORKDIR ${SRC}/rdkit-Release_${RDKIT_RELEASE}
RUN sed -i "s|#if _MSC_VER|#ifdef _WIN32|" Code/GraphMol/catch_chirality.cpp
RUN sed -i "s|Windows\.h|windows.h|" Code/GraphMol/MMPA/MMPA_UnitTest.cpp
RUN sed -i -e "s|\( *\)\(target_link_libraries(MolDraw2D PUBLIC \)\(Cairo::Cairo\)|\1target_include_directories(MolDraw2D PUBLIC ${DEPS}/include/cairo)\n\1\2 ${DEPS}/lib/libcairo.a ${DEPS}/lib/libpixman-1.a ${DEPS}/lib/libpng16.a|" \
    -e "s|\( *\)\(target_link_libraries(MolDraw2D PUBLIC \)\(Freetype::Freetype\)|\1target_include_directories(MolDraw2D PUBLIC ${DEPS}/include/freetype2)\n\1\2 ${DEPS}/lib/libfreetype.a ${DEPS}/lib/libz.a|" \
    Code/GraphMol/MolDraw2D/CMakeLists.txt
RUN sed -i -e "s|if(WIN32)|if(FALSE)|" \
    -e "s|\(SWIG_LINK_LIBRARIES *( *\)\(GraphMolWrap *\)\(\${RDKit_Wrapper_Libs}\)|\1\2\3 ${DEPS}/lib/libpixman-1.a ${DEPS}/lib/libpng16.a|" \
    Code/JavaWrappers/gmwrapper/CMakeLists.txt
RUN sed -i "s|\(SWIG_LINK_LIBRARIES *( *\)\(RDKFuncs *\)\(\${RDKit_Wrapper_Libs}\)|\1\2\3 ${DEPS}/lib/libpixman-1.a ${DEPS}/lib/libpng16.a|" \
    Code/JavaWrappers/csharp_wrapper/CMakeLists.txt
# Patch for Avalon 2.0.3
RUN sed -i -e "s|set(AVALON_VERSION \"2\.0\.2\")|set(AVALON_VERSION \"2.0.3\")|" \
    -e "s|set(AVALONTOOLS_MD5SUM \"fc188383a8896802e948c977b73dbe71\")|set(AVALONTOOLS_MD5SUM \"89e083c3c021baec77a2b85a641c86dd\")|" \
    External/AvalonTools/CMakeLists.txt
RUN sed -i "s|^\(.include <RDGeneral/\)\(versions.h>\)|\1\2\n\1RDLog.h>|" Code/JavaWrappers/gmwrapper/GraphMolJava.i
RUN sed -i "s|^\(.include <RDGeneral/\)\(versions.h>\)|\1\2\n\1RDLog.h>|" Code/JavaWrappers/csharp_wrapper/GraphMolCSharp.i
RUN mkdir build
WORKDIR ${SRC}/rdkit-Release_${RDKIT_RELEASE}/build
RUN source ${DEVTOOLSET_PATH}/enable && FREETYPE_DIR=${DEPS} ${DEPS}/bin/cmake \
    -D RDK_BUILD_INCHI_SUPPORT=ON \
    -D RDK_BUILD_AVALON_SUPPORT=ON \
    -D RDK_BUILD_PYTHON_WRAPPERS=OFF \
    -D RDK_BUILD_FREESASA_SUPPORT=ON \
    -D RDK_BUILD_MOLINTERCHANGE_SUPPORT=ON \
    -D RDK_BUILD_COORDGEN_SUPPORT=ON \
    -D RDK_BUILD_CAIRO_SUPPORT=ON \
    -D RDK_INSTALL_INTREE=OFF \
    -D RDK_BUILD_SWIG_WRAPPERS=ON \
    -D RDK_BUILD_SWIG_JAVA_WRAPPER=ON \
    -D RDK_BUILD_SWIG_CSHARP_WRAPPER=ON \
    -D RDK_BUILD_THREADSAFE_SSS=ON \
    -D RDK_USE_BOOST_SERIALIZATION=ON \
    -D RDK_BUILD_CPP_TESTS=ON \
    -D RDK_BUILD_PGSQL=OFF \
    -D Boost_INCLUDE_DIR=${DEPS}/include \
    -D Boost_LIBRARY_DIR=${DEPS}/lib \
    -D Boost_NO_SYSTEM_PATHS=ON \
    -D Boost_NO_BOOST_CMAKE=ON \
    -D Boost_USE_STATIC_LIBS=ON \
    -D CMAKE_BUILD_TYPE=Release \
    -D EIGEN3_INCLUDE_DIR=${DEPS}/include/eigen3 \
    -D ZLIB_LIBRARY=${DEPS}/lib/libz.a \
    -D ZLIB_INCLUDE_DIR=${DEPS}/include \
    -D SWIG_EXECUTABLE=${DEPS}/bin/swig \
    -D SWIG_DIR=${DEPS}/share/swig/${SWIG_VERSION} \
    -D CAIRO_INCLUDE_DIR=${DEPS}/include/cairo \
    -D CAIRO_LIBRARY_DIR=${DEPS}/lib \
    -D CMAKE_INSTALL_PREFIX=${IMAGE} \
    ..
RUN source ${DEVTOOLSET_PATH}/enable && make -j${BUILD_CONCURRENCY} && make -j${BUILD_CONCURRENCY} install
